{"name":"Fourdeltaone-status","tagline":"fourDeltaOne Status Project","body":"fourDeltaOne Status Project\r\n===\r\n\r\nThe most recent version of the original code of the fourDeltaOne status website.\r\n\r\nDevelopment on this code by Icedream has been dropped in March and the ownership has\r\nbeen given over to MAGIC. The code is pretty much useless as of the cancelling\r\nof fourDeltaOne due to its C&D. It should be only used as a reference or as an opportunity\r\nfor bug fixing and maybe reviving the code.\r\n\r\n_Don't rely on it as in expecting it to be bug-free. It is not._\r\n\r\nWill I get support for this code?\r\n---\r\n\r\nI expect from you as the code user to know what you're doing. Don't contact me if you don't\r\nknow how to properly set up a virtual host on Apache or compile C# stuff or similar, that will\r\njust tell me that you're not okay to maintain this project properly. Instead look it up on\r\nGoogle and _educate yourself_. Only if that fails, and only then, you can give it a try on IRC.\r\nBut no guarantees.\r\n\r\ntl;dr: _No_.\r\n\r\nWhat does this repository include?\r\n---\r\n\r\nRight at the moment, this repository includes the source code from the following\r\nparts of the project:\r\n\r\n- Status backend (API, <code>backend/</code> folder)  \r\n- Status frontend (Webpage, <code>webpage/</code> folder)\r\n\r\nI want to have this on my own server!\r\n---\r\n\r\n1. It's the least important problem, but you will need to compile the latest\r\n   Mono (or at least 2.11 or 3.x) to get the backend running since it uses\r\n   .NET 4.5. If the server is a Windows server, just install the latest\r\n   .NET Framework, you won't need Mono. You need also the rewrite module for Apache.\r\n2. You will need the complete source code tree of fourdeltaone-status. This\r\n   means you have to check out all the submodules too. This is done by using\r\n   <code>git submodule update --init</code> or whatever you prefer.\r\n3. Compile the backend with the <code>build.bat</code> for Windows or the\r\n   <code>build.sh</code> for Linux. At this point, all requirements are expected\r\n   to be installed.\r\n4. Check <code>backend/bin/Release</code> and edit the configuration to your needs.\r\n   Especially the authentication part is important. Make sure you add port forwarding\r\n   to the port 29001 on every firewall which may block connections.\r\n   *Note:* If you are going to run the backend on a different port than 29001 or\r\n   even on a different server than the website (or you generally changed important API\r\n   source bits), you need to create a <code>website/config.json</code>. How to do that is explained under \"Customizing the\r\n   frontend\".\r\n5. Run the backend binary (fdocheck.exe), on Linux in some <code>screen</code> session or\r\n   whatever you prefer to run background tasks. You can even do\r\n   <code>mono fdocheck.exe &disown</code>.\r\n6. Configure your apache with a virtualhost pointing to the <code>website/</code>\r\n   directory.\r\n7. Test the website. It should work now.\r\n\r\nCustomizing the frontend\r\n---\r\n\r\nThe website code is customizable without changes in the code itself. It saves you a lot\r\nof time in case you want to have backend and frontend on different servers or if you can't\r\nuse port 29001 (or generally changed the source code).\r\nFor this you need to make a JSON file <code>config.json</code> in the <code>website/</code>\r\nfolder.\r\n\r\nIf you don't know how a JSON file looks like, you should look it up on Google. It is easy\r\nand short, it's only <code>{ key: value, key: value, key: { key: value, key: value } }</code>.\r\n\r\nSo let's look at a complete example of a configuration file:\r\n\r\n```json\r\n{\r\n\t\"backend\": {\r\n\t\t\"port\": 29001,\r\n\t\t\"host\": \"s.mufff.in\",\r\n\t\t\"path\": \"/\",\r\n\t\t\"secure\": false\r\n\t}\r\n}\r\n```\r\n\r\nThis contains all currently available options which you can customize.\r\nAll parameters can be left out, in this case they will be set to the default.\r\nBelow the explaination:\r\n\r\n1. *Backend*\r\n   The backend configuration allows you to give details about where the frontend can access the\r\n   data generated by the backend.\r\n   - int *port*: This shouldn't be changed unless you edited the server API code in the backend.\r\n     Default is 29001.\r\n   - string *host*: The host on which the backend runs. IP or hostname is both okay.\r\n     Default is same host as frontend (looked up via JavaScript from the client).\r\n   - string *path*: This shouldn't be changed unless you edited the server API code in the backend.\r\n     Default is \"/\".\r\n   - boolean *secure*: This shouldn't be changed unless you edited the server API code in the backend.\r\n     Default is false.\r\n\r\nLicense\r\n---\r\n\r\nThe *whole* project is published under the terms of the GNU General Public\r\nLicense Version 3, you can read the whole text in the LICENSE.txt.\r\nThe license applies to the website too, it doesn't have its own license\r\nany longer.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}